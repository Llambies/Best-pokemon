(()=>{class t{constructor(){this.pokemonData=null,this.selectedStats=new Set,this.availableStats=["hp","attack","defense","special-attack","special-defense","speed"],this.statNames={hp:"PS",attack:"ATK",defense:"DEF","special-attack":"SPA","special-defense":"SPD",speed:"SPE"},this.currentPokemon=null,this.imaginaryPokemon={name:"Pokémon Imaginario",stats:{},sprites:{},currentSprite:null},this.selectedPokemonElement=null,this.selectedStatElement=null,this.pokemonHistory=[],this.shownPokemon=[],this.roundNumberElement=document.getElementById("round-number"),this.pokemonListElement=document.getElementById("pokemon-list"),this.statsListElement=document.getElementById("stats-list"),this.imaginaryStatsElement=document.getElementById("imaginary-stats"),this.totalStatsElement=document.getElementById("total-stats"),this.selectButton=document.getElementById("select-button"),this.reloadButton=document.getElementById("reload-data"),this.historyListElement=document.getElementById("history-list"),this.selectButton.addEventListener("click",(()=>this.makeSelection())),this.reloadButton.addEventListener("click",(()=>this.reloadPokemonData()));const t=localStorage.getItem("pokemonHistory");t&&(this.pokemonHistory=JSON.parse(t)),this.loadPokemonData(),this.updateHistoryDisplay()}async loadPokemonData(){try{const t=localStorage.getItem("pokemonData");if(t)return console.log("Cargando datos de Pokémon desde caché..."),this.pokemonData=JSON.parse(t),void this.startNewRound();console.log("Cargando datos de Pokémon desde la API...");const e=await fetch("https://pokeapi.co/api/v2/pokemon?limit=10000"),s=(await e.json()).results.map((async t=>{const e=await fetch(t.url),s=await e.json();return{name:s.name,sprite:s.sprites.front_default,stats:s.stats.reduce(((t,e)=>(t[e.stat.name]=e.base_stat,t)),{})}})),a=await Promise.all(s);this.pokemonData=a.reduce(((t,e)=>(t[e.name]=e,t)),{});try{localStorage.setItem("pokemonData",JSON.stringify(this.pokemonData)),console.log("Datos de Pokémon guardados en caché")}catch(t){console.error("Error al guardar en localStorage:",t)}this.startNewRound()}catch(t){console.error("Error al cargar datos de Pokémon:",t);const e=document.createElement("div");e.className="error-message",e.innerHTML='\n        <h3>Error al cargar los datos</h3>\n        <p>No se pudieron cargar los datos de Pokémon. Por favor, recarga la página o intenta más tarde.</p>\n        <button id="retry-load">Reintentar</button>\n      ',document.querySelector(".game-container").prepend(e),document.getElementById("retry-load").addEventListener("click",(()=>{e.remove(),this.loadPokemonData()}))}}async reloadPokemonData(){confirm("¿Estás seguro de que quieres recargar los datos desde la API? Esto puede tardar unos momentos.")&&(localStorage.removeItem("pokemonData"),localStorage.removeItem("pokemonHistory"),this.pokemonHistory=[],this.updateHistoryDisplay(),this.resetGame(),await this.loadPokemonData())}startNewRound(){if(!this.pokemonData||0===Object.keys(this.pokemonData).length)return void console.error("No hay datos de Pokémon disponibles");if(6===this.selectedStats.size)return console.log("Se alcanzaron las 6 estadísticas en startNewRound"),void this.showFinalResults();this.pokemonListElement.innerHTML="";const t=Object.keys(this.pokemonData),e=this.getRandomPokemon(t,6).map((t=>({name:t,stats:this.pokemonData[t].stats,sprite:this.pokemonData[t].sprite})));this.shownPokemon.push(e),this.currentRound=e,this.currentRound.forEach((t=>{if(t.stats){const e=this.createPokemonCard(t);this.pokemonListElement.appendChild(e)}})),this.roundNumberElement.textContent=this.selectedStats.size+1}createPokemonCard(t){if(!t.stats)return console.error("Pokémon sin estadísticas:",t),null;const e=document.createElement("div");e.className="pokemon-card";const s=document.createElement("div");s.className="pokemon-sprite",s.innerHTML=`\n        <img src="${t.sprite}" alt="${this.capitalize(t.name)}" loading="lazy">\n    `;const a=document.createElement("div");a.className="pokemon-info";const n=document.createElement("div");n.className="pokemon-name",n.textContent=this.capitalize(t.name);const i=document.createElement("div");return i.className="pokemon-stats",Object.entries(t.stats).forEach((([e,s])=>{const a=document.createElement("div"),n=this.availableStats.includes(e);a.className="stat-bar "+(n?"selectable":"disabled");const o=document.createElement("div");o.className="stat-label",o.textContent=this.statNames[e];const r=document.createElement("div");r.className="stat-progress";const l=document.createElement("div");l.className="stat-fill";const c=s/255*100;l.style.width=`${c}%`;const d=1.2*c;l.style.backgroundColor=`hsl(${d}, 100%, 50%)`;const m=document.createElement("div");m.className="stat-value",m.textContent=s,r.appendChild(l),a.appendChild(o),a.appendChild(r),a.appendChild(m),n&&a.addEventListener("click",(()=>{this.selectedStats.add(e),this.availableStats=this.availableStats.filter((t=>t!==e)),this.imaginaryPokemon.stats[e]=s,this.imaginaryPokemon.sprites[e]=t.sprite,this.imaginaryPokemon.currentSprite=t.sprite,this.imaginaryPokemon.sources=this.imaginaryPokemon.sources||{},this.imaginaryPokemon.sources[e]={name:t.name,sprite:t.sprite,round:this.selectedStats.size},this.updateImaginaryPokemon(),document.querySelectorAll(".stat-bar").forEach((t=>{const e=t.querySelector(".stat-label");if(e){const s=e.textContent,a=Object.entries(this.statNames).find((([t,e])=>e===s))?.[0];a&&(this.availableStats.includes(a)||(t.classList.remove("selectable"),t.classList.add("disabled")))}})),6===this.selectedStats.size?(console.log("¡Juego terminado! Mostrando resultados finales..."),document.querySelectorAll(".stat-bar").forEach((t=>{t.classList.remove("selectable"),t.classList.add("disabled"),t.style.pointerEvents="none"})),setTimeout((()=>{this.showFinalResults()}),500)):(console.log("Iniciando nueva ronda..."),this.startNewRound())})),i.appendChild(a)})),a.appendChild(n),a.appendChild(i),e.appendChild(s),e.appendChild(a),e}createStatElement(t){const e=document.createElement("div");return e.className="stat-item",e.textContent=this.statNames[t],e.addEventListener("click",(()=>this.selectStat(t,e))),e}selectPokemon(t,e){this.selectedPokemonElement&&this.selectedPokemonElement.classList.remove("selected"),e.classList.add("selected"),this.selectedPokemonElement=e,this.currentPokemon=t,this.checkSelection()}selectStat(t,e){this.selectedStatElement&&this.selectedStatElement.classList.remove("selected"),e.classList.add("selected"),this.selectedStatElement=e,this.checkSelection()}checkSelection(){this.selectButton.disabled=!(this.currentPokemon&&this.selectedStatElement)}makeSelection(){if(!this.currentPokemon||!this.selectedStatElement)return;const t=this.availableStats[Array.from(this.statsListElement.children).indexOf(this.selectedStatElement)];this.selectedStats.add(t),this.availableStats=this.availableStats.filter((e=>e!==t)),this.imaginaryPokemon.stats[t]=this.currentPokemon.stats[t],this.imaginaryPokemon.sprites[t]=this.currentPokemon.sprite,this.imaginaryPokemon.currentSprite=this.currentPokemon.sprite,console.log(`Estadísticas seleccionadas: ${this.selectedStats.size}`),this.updateImaginaryPokemon(),6===this.selectedStats.size?(console.log("¡Juego terminado! Mostrando resultados finales..."),this.showFinalResults()):(console.log("Iniciando nueva ronda..."),this.startNewRound())}updateImaginaryPokemon(){let t=`\n        <div class="imaginary-main">\n            ${this.imaginaryPokemon.currentSprite?`\n                <div class="imaginary-sprite">\n                    <img src="${this.imaginaryPokemon.currentSprite}" alt="Pokémon Imaginario" loading="lazy">\n                </div>\n            `:""}\n            <div class="imaginary-stats">\n                ${Object.entries(this.imaginaryPokemon.stats).map((([t,e])=>{const s=e/255*100,a=1.2*s;return`\n                            <div class="stat-bar">\n                                <div class="stat-label">${this.statNames[t]}</div>\n                                <div class="stat-progress">\n                                    <div class="stat-fill" style="width: ${s}%; background-color: hsl(${a}, 100%, 50%);"></div>\n                                </div>\n                                <div class="stat-value">${e}</div>\n                            </div>\n                        `})).join("")}\n            </div>\n        </div>\n        ${Object.keys(this.imaginaryPokemon.stats).length>0?`\n            <div class="origin-pokemon">\n                <h4>Pokémon de Origen</h4>\n                <div class="origin-sprites">\n                    ${Object.entries(this.imaginaryPokemon.sprites).map((([t,e])=>`\n                            <div class="origin-sprite-container">\n                                <div class="origin-sprite">\n                                    <img src="${e}" alt="Origen ${this.statNames[t]}">\n                                </div>\n                                <div class="origin-stat">${this.statNames[t]}</div>\n                            </div>\n                        `)).join("")}\n                </div>\n            </div>\n        `:""}\n    `;this.imaginaryStatsElement.innerHTML=t;const e=Object.values(this.imaginaryPokemon.stats).reduce(((t,e)=>t+e),0);this.totalStatsElement.textContent=e}calculateBestPossibleCombination(){let t=[],e=[];console.log(this.shownPokemon),this.shownPokemon.forEach(((s,a)=>{t[a]=[0,0,0,0,0,0],e[a]=[],s.forEach((s=>{t[a][0]<s.stats.hp&&(t[a][0]=s.stats.hp,e[a][0]=s),t[a][1]<s.stats.attack&&(t[a][1]=s.stats.attack,e[a][1]=s),t[a][2]<s.stats.defense&&(t[a][2]=s.stats.defense,e[a][2]=s),t[a][3]<s.stats["special-attack"]&&(t[a][3]=s.stats["special-attack"],e[a][3]=s),t[a][4]<s.stats["special-defense"]&&(t[a][4]=s.stats["special-defense"],e[a][4]=s),t[a][5]<s.stats.speed&&(t[a][5]=s.stats.speed,e[a][5]=s)}))}));let s={stats:{},sources:{},total:0};return s=this.calcularMejorTotal(t,e),{stats:s.stats,sources:s.sources,total:s.total}}calcularMejorTotal(t,e){const s=[];for(let a=0;a<t.length;a++)for(let n=0;n<t[a].length;n++)if(n!=a)for(let i=0;i<t[a].length;i++)if(i!=a&&i!=n)for(let o=0;o<t[a].length;o++)if(o!=a&&o!=n&&o!=i)for(let r=0;r<t[a].length;r++)if(r!=a&&r!=n&&r!=i&&r!=o)for(let l=0;l<t[a].length;l++)l!=a&&l!=n&&l!=i&&l!=o&&l!=r&&s.push({stats:{hp:t[a][0],attack:t[n][1],defense:t[i][2],"special-attack":t[o][3],"special-defense":t[r][4],speed:t[l][5]},sources:{hp:e[a][0],attack:e[n][1],defense:e[i][2],"special-attack":e[o][3],"special-defense":e[r][4],speed:e[l][5]},total:t[a][0]+t[n][1]+t[i][2]+t[o][3]+t[r][4]+t[l][5]});return console.log(s.sort(((t,e)=>e.total-t.total))[0]),s.sort(((t,e)=>e.total-t.total))[0]}showFinalResults(){const t=document.getElementById("results-modal"),e=(document.querySelector(".modal-content"),document.querySelector(".modal-sprite")),s=document.querySelector(".modal-body"),a=["hp","attack","defense","special-attack","special-defense","speed"],n=Object.values(this.imaginaryPokemon.stats).reduce(((t,e)=>t+e),0),i=this.calculateBestPossibleCombination(),o={id:Date.now(),name:this.imaginaryPokemon.name,stats:{...this.imaginaryPokemon.stats},sprites:{...this.imaginaryPokemon.sprites},currentSprite:this.imaginaryPokemon.currentSprite,total:n,date:(new Date).toLocaleString()};Array.isArray(this.pokemonHistory)||(this.pokemonHistory=[]),this.pokemonHistory.unshift(o);try{localStorage.setItem("pokemonHistory",JSON.stringify(this.pokemonHistory))}catch(t){console.error("Error al guardar el historial:",t)}if(this.updateHistoryDisplay(),s.innerHTML=`\n        <div class="results-comparison">\n            <div class="user-results">\n                <h3>Tu Pokémon</h3>\n                <div class="stats-container">\n                    ${a.map((t=>{const e=this.imaginaryPokemon.stats[t],s=e/255*100,a=this.imaginaryPokemon.sources&&this.imaginaryPokemon.sources[t];return`\n                            <div class="stat-bar">\n                                <div class="stat-name">\n                                    ${this.statNames[t]}\n                                    ${a?`\n                                    <span class="stat-source">\n                                        <img src="${a.sprite}" alt="${a.name}" title="${this.capitalize(a.name)} (Ronda ${a.round})">\n                                    </span>\n                                    `:""}\n                                </div>\n                                <div class="stat-progress">\n                                    <div class="progress-bar" style="width: ${s}%"></div>\n                                    <span class="stat-value">${e}</span>\n                                </div>\n                            </div>\n                        `})).join("")}\n                    <div class="total-value">Total: ${Object.values(this.imaginaryPokemon.stats).reduce(((t,e)=>t+e),0)}</div>\n                </div>\n            </div>\n            <div class="best-possible">\n                <h3>Mejor Posible</h3>\n                <div class="stats-container">\n                    ${a.map((t=>{const e=i.stats[t],s=e/255*100,a=i.sources[t];return`\n                            <div class="stat-bar">\n                                <div class="stat-name">\n                                    ${this.statNames[t]}\n                                    ${a?`\n                                    <span class="stat-source">\n                                        <img src="${a.sprite}" alt="${a.name}" title="${this.capitalize(a.name)}">\n                                    </span>\n                                    `:""}\n                                </div>\n                                <div class="stat-progress">\n                                    <div class="progress-bar" style="width: ${s}%"></div>\n                                    <span class="stat-value">${e}</span>\n                                </div>\n                            </div>\n                        `})).join("")}\n                    <div class="total-value">Total: ${i.total}</div>\n                </div>\n            </div>\n        </div>\n    `,e){const t=this.imaginaryPokemon.currentSprite;e.innerHTML=t?`<img src="${t}" alt="Pokémon Imaginario" loading="lazy">`:'<div class="placeholder-sprite">?</div>'}if(t){t.classList.add("show");const e=document.querySelector(".close-modal"),s=document.querySelector(".modal-button");e&&(e.onclick=()=>{t.classList.remove("show")}),s&&(s.onclick=()=>{t.classList.remove("show"),this.resetGame()}),t.onclick=e=>{e.target===t&&t.classList.remove("show")}}}resetGame(){this.selectedStats.clear(),this.availableStats=["hp","attack","defense","special-attack","special-defense","speed"],this.imaginaryPokemon={name:"Pokémon Imaginario",stats:{},sprites:{},currentSprite:null},this.pokemonListElement.innerHTML="",this.imaginaryStatsElement.innerHTML="",this.totalStatsElement.textContent="0",this.roundNumberElement.textContent="1",this.currentPokemon=null,this.selectedPokemonElement=null,this.selectedStatElement=null,this.shownPokemon=[],this.startNewRound()}updateHistoryDisplay(){this.historyListElement&&(this.historyListElement.innerHTML=(this.pokemonHistory||[]).map((t=>t&&t.stats&&t.sprites?`\n          <div class="history-card">\n              ${t.currentSprite?`\n                  <div class="history-sprite">\n                      <img src="${t.currentSprite}" alt="${t.name}" loading="lazy">\n                  </div>\n              `:""}\n              <h3>${t.name||"Pokémon Imaginario"}</h3>\n              <div class="history-stats">\n                  ${Object.entries(t.stats).filter((([e,s])=>e&&void 0!==s&&t.sprites[e])).map((([e,s])=>`\n                          <div class="history-stat">\n                              ${t.sprites[e]?`\n                                  <img src="${t.sprites[e]}" alt="" class="stat-origin-sprite">\n                              `:""}\n                              ${this.statNames[e]||e}: ${s}\n                          </div>\n                      `)).join("")}\n              </div>\n              <div class="history-total">\n                  Total: ${t.total||Object.values(t.stats).reduce(((t,e)=>t+e),0)}\n              </div>\n              <div class="history-date">\n                  Creado: ${t.date||(new Date).toLocaleString()}\n              </div>\n          </div>\n        `:"")).filter((t=>t)).join(""))}getRandomPokemon(t,e){return t.sort((()=>.5-Math.random())).slice(0,e)}capitalize(t){return t.charAt(0).toUpperCase()+t.slice(1)}}window.addEventListener("load",(()=>{new t}))})();